function [seizure_auto, seizure_epi] = testityo
    fid = fopen('C:\Users\Wun Wun\Documents\Spring 2016\Senior Design\Figures\Overlaps.txt','wt');
    fname = {'42KOMbaseline4wks', '43KOMbaseline4wks', ...
             '108KOMbaseline4wks', '148KOFbaseline4wks', ...
             '150KOFbaseline4wks', ...'218KO08-22-11_8wks', ...
             '218KO9-28-11_13wks', '225KO08-30-11_8wks', ...
             '225KO10-05-11_13wks', '230KO08-30-11_8wks', ...
             '230KO10-04-11_13wks', '276WTMbaseline4wks', ...
             '278KOMbaseline4wks', '280WTFbaseline4wks', ...
             '304WT10-21-11_8wks', '304WT11-3-11_13wks', ...
             '305WT10-21-11_8wks', '305WT11-04-11_13wks', ...
             '387WTFbaseline4wks', '417WTMbaseline4wks', ...
             '423WTMbaseline4wks', '433KOMbaseline4wks', ...
             '449KOMbaseline4wks', '522KOFbaseline4wks', ...
             '525KOFbaseline4wks', '845KO08-03-12_8wks', ...
             '845KO09-07-11_13wks', '850KO08-03-12_8wks', ...
             '850KO09-07-12_13wks', '872KO09-06-12_8wks', ...
             '872KO10-09-12_13wks', '874WT09-06-12_8wks', ...
             '874WT10-09-12_13wks', '878WT09-21-12_8wks', ...
             '878WT10-17-12_13wks', '880WT09-17-12_8wks', ...
             '880WT10-25-12_13wks', '882WT09-17-12_8wks', ...
             '882WT10-25-12_13wks'};
    fname = {'225KO08-30-11_8wks'};
    sourcedir = 'C:\Users\Wun Wun\Documents\Spring 2016\Senior Design\mice data\'; 
    sinkdir = 'C:\Users\Wun Wun\Documents\Spring 2016\Senior Design\Figures\';
    figure;
    set(gcf, 'Position', get(0,'Screensize'));
    hold on
    count_auto_tot = 0;
    count_epi_tot = 0;
    for i = 1:length(fname)
        count_auto = 0;
        count_epi = 0;
        fid2 = fopen(['C:\Users\Wun Wun\Documents\Spring 2016\Senior Design\Figures\' fname{i} '_report.txt'],'wt');
        time_e = -2;
        time_a = -1;
        filename = [sourcedir fname{i} '.csv'];
        disp([fname{i} '.csv'])
        newdir = [sinkdir fname{i} '\'];
        data = csvread(filename);
        points = 1:1500:length(data);
        mkdir(sinkdir,fname{i});
        
        for k = 1:length(points)-1
            d = data(points(k):points(k+1)-1);
            seizure_auto(k) = seizure_1991(d);
            if seizure_auto(k) == 1
                count_auto = count_auto + 1;
                time_auto = num2str(((points(k)-1)/250));
                time_auto = strrep(time_auto,'.','\_');
                autocorr = ifft(fft(d).*conj(fft(d)));
                h = plot(1:1500,d,1:1500,max(d)/max(autocorr)*autocorr - 1000);
                title(['Autocorrelation ' strrep(fname{i},'_','\_') '\_' time_auto 's'])
                set(gcf, 'Position', get(0,'Screensize'));
                saveas(gcf,[newdir fname{i} '_' time_auto 's_auto'],'png')
                delete(h)
                time_a = ((points(k)-1)/250);
            end
            if k < length(points)-6 % only times we perform epileptogenic index analysis
                d2 = data(points(k):points(k+5)-1);
                seizure_epi(k) = epileptogenicity(d2);
                if seizure_epi(k) > -1
                    count_epi = count_epi + 1;
                    time_epi = num2str(((points(k+seizure_epi(k)-1))-1)/250);
                    time_epi = strrep(time_epi,'.','_');
                    h = plot(1:1500,d2((seizure_epi(k)-1)*1500+1:(seizure_epi(k))*1500));
                    title(['Epileptogenicity ' strrep(fname{i},'_','\_') '\_' time_epi 's'])
                    set(gcf, 'Position', get(0,'Screensize'));
                    saveas(gcf,[newdir fname{i} '_' time_epi 's_epi'],'png')
                    delete(h)
                    time_e = ((points(k+seizure_epi(k)-1))-1)/250;
                end
            end   
            if time_e == time_a
                fprintf(fid,'%s\n',[fname{i} '_time_' time_auto 's_index_' num2str(time_auto*250)]);
            end
            clear seizure_auto seizure_epi
        end
        fprintf(fid2,'%s = %f, %s = %f','#Auto = ',count_auto,'#Epi = ',count_epi)
        fclose(fid2)
        count_auto_tot = count_auto_tot + count_auto;
        count_epi_tot = count_epi_tot + count_epi;
    end
    disp(count_auto_tot)
    disp(count_epi_tot)
    fprintf(fid,'%s = %f, %s = %f','TotAutoCorrDet',count_auto_tot,'TotEpiIndDet',count_epi_tot)
    fclose(fid);
return

function seiz = seizure_1991(data)

    % assume all traces lie in columns of data
    % STORED CONSTANTS
    fs = 250;
    t = 0;
    % compute autocorrelation of data
    adata = ifft(fft(data).*conj(fft(data)));
    for j = 1:size(adata,2)
        [~,locs] = findpeaks(adata(:,j));
        locs = [1; locs; fs*6]; % pad with first and last indices
        locs = removenoisy(locs,adata);
        if length(locs) < 2 % only one peak => no periodicity
            seiz = 0;
            return
        end
        for k = 2:length(locs)-1
            d1 = find(flipud(adata(locs(k-1):locs(k)))<0,1);
            d2 = find(adata(locs(k):locs(k+1))<0,1);
            if isempty(d1) d1 = 0; end
            if isempty(d2) d2 = 0; end
            cur_t(1) = locs(k) + 1 - d1;
            cur_t(2) = locs(k) - 1 + d2;
            int = cumsum(1/fs*adata(cur_t(1):cur_t(2)));
            if isempty(find(int > int(end)/2,1))
                t(k) = 0;
                break
            end
            t(k) = 1/fs*(cur_t(1) - 1 + find(int > int(end)/2,1));
            if k > 4
                break
            end
        end
        t(t == 0) = [];
        if isempty(t)
            seiz = 0;
            return
        end
        t = t(2:end)/t(1);
        t = abs(round(t) - t);
        t = score(t);
        s(j) = sum(t);
        
        clear locs t
    end
    seiz = sum(s>=12)>0;
    
        
return

function locs = removenoisy(locs,adata)
    flag = 1;
    while flag ~= 0
        flag = 0;
        for k = 1:length(locs)-1
            if adata(locs(k)) < 0
                flag = 1;
                locs(k) = [];
                break
            end
            if isempty(find(adata(locs(k):locs(k+1))<0,1))
                flag = 1;
                if adata(locs(k)) < adata(locs(k+1))
                    locs(k) = [];
                else
                    locs(k+1) = [];
                end
                break
            end
            if locs(k) ~= 1 && locs(k) ~= length(adata)
                if sum(adata(locs(k)-1:locs(k)+1)) < 0
                    locs(k) = [];
                    flag = 1;
                    break
                end
            end
        end
    end

return

function t = score(t)
    t(t>=0.400) = -10;
    t(t>=0.300) = -9;
    t(t>=0.200) = -8;
    t(t>=0.175) = -7;
    t(t>=0.150) = -6;  
    t(t>=0.125) = -5;
    t(t>=0.100) = -4;
    t(t>=0.075) = -3;
    t(t>=0.050) = -2;
    t(t>=0.025) = -1;
    t(t>=0) = 0;
    t = t + 5;
return

function [seizureIndex, seizureStart] = epileptogenicity(data)
	
	% assume all traces lie in columns of data
    	
    fs = 250;                    % sampling frequency
    duration = 6;                % time duration of the window
    windowSize = fs*duration;    % window size in samples
    thresh = 0.3;                % threshold for detection
    bias = 0.1;                  % positive bias
    advance = duration * fs;     % the number of samples to shift the window 

    startIndex = 1;
    endIndex = windowSize;
    
    hzbin = fs/windowSize;
    
    thetaLow = 4/hzbin;
    thetaHigh = 7/hzbin;
    alphaLow = 8/hzbin;
    alphaHigh = 12/hzbin;
    
    betaLow = 13/hzbin;
    betaHigh = 24/hzbin;
    gammaLow = 25/hzbin;
    gammaHigh = 97/hzbin;
    
	ER = [];
	
	while (endIndex <= size(data, 1))
		energySpectrum = fft(data(startIndex:endIndex)).*conj(fft(data(startIndex:endIndex)));
		energyRatio = sum(energySpectrum(betaLow:gammaHigh)) / sum(energySpectrum(thetaLow:alphaHigh));
		
		ER = [ER, energyRatio];
		endIndex = endIndex + advance;
		startIndex = startIndex + advance;
	end
	
	U_n = [];
	seizureIndex = -1;
	seizureStart = -1;
	
	for i = 1:length(ER)
        U_n = [U_n, ER(i) - mean(ER(1:i)) - bias];
        [min_val, min_ind] = min(U_n);
        if (U_n(i) - min_val(1) > thresh)
            seizureIndex = i;
            seizureStart = min_ind(1);
        end  
    end
return
